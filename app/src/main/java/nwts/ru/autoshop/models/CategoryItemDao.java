package nwts.ru.autoshop.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY_ITEM".
*/
public class CategoryItemDao extends AbstractDao<CategoryItem, Long> {

    public static final String TABLENAME = "CATEGORY_ITEM";

    /**
     * Properties of entity CategoryItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Category_ID = new Property(1, int.class, "Category_ID", false, "CATEGORY__ID");
        public final static Property Category_name = new Property(2, String.class, "Category_name", false, "CATEGORY_NAME");
        public final static Property Category_image = new Property(3, String.class, "Category_image", false, "CATEGORY_IMAGE");
        public final static Property Category_Refresh_Time = new Property(4, long.class, "Category_Refresh_Time", false, "CATEGORY__REFRESH__TIME");
    }

    private DaoSession daoSession;


    public CategoryItemDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CATEGORY__ID\" INTEGER NOT NULL ," + // 1: Category_ID
                "\"CATEGORY_NAME\" TEXT," + // 2: Category_name
                "\"CATEGORY_IMAGE\" TEXT," + // 3: Category_image
                "\"CATEGORY__REFRESH__TIME\" INTEGER NOT NULL );"); // 4: Category_Refresh_Time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CategoryItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCategory_ID());
 
        String Category_name = entity.getCategory_name();
        if (Category_name != null) {
            stmt.bindString(3, Category_name);
        }
 
        String Category_image = entity.getCategory_image();
        if (Category_image != null) {
            stmt.bindString(4, Category_image);
        }
        stmt.bindLong(5, entity.getCategory_Refresh_Time());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CategoryItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCategory_ID());
 
        String Category_name = entity.getCategory_name();
        if (Category_name != null) {
            stmt.bindString(3, Category_name);
        }
 
        String Category_image = entity.getCategory_image();
        if (Category_image != null) {
            stmt.bindString(4, Category_image);
        }
        stmt.bindLong(5, entity.getCategory_Refresh_Time());
    }

    @Override
    protected final void attachEntity(CategoryItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CategoryItem readEntity(Cursor cursor, int offset) {
        CategoryItem entity = new CategoryItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // Category_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Category_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Category_image
            cursor.getLong(offset + 4) // Category_Refresh_Time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CategoryItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory_ID(cursor.getInt(offset + 1));
        entity.setCategory_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory_image(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory_Refresh_Time(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CategoryItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CategoryItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CategoryItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
