package nwts.ru.autoshop.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_DETAIL_IMAGE".
*/
public class ProductDetailImageDao extends AbstractDao<ProductDetailImage, Long> {

    public static final String TABLENAME = "PRODUCT_DETAIL_IMAGE";

    /**
     * Properties of entity ProductDetailImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Menu_ID = new Property(1, int.class, "Menu_ID", false, "MENU__ID");
        public final static Property Menu_image = new Property(2, String.class, "Menu_image", false, "MENU_IMAGE");
        public final static Property Description = new Property(3, String.class, "Description", false, "DESCRIPTION");
        public final static Property Product_ID = new Property(4, int.class, "Product_ID", false, "PRODUCT__ID");
    }

    private DaoSession daoSession;


    public ProductDetailImageDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDetailImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_DETAIL_IMAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MENU__ID\" INTEGER NOT NULL ," + // 1: Menu_ID
                "\"MENU_IMAGE\" TEXT," + // 2: Menu_image
                "\"DESCRIPTION\" TEXT," + // 3: Description
                "\"PRODUCT__ID\" INTEGER NOT NULL );"); // 4: Product_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_DETAIL_IMAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductDetailImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMenu_ID());
 
        String Menu_image = entity.getMenu_image();
        if (Menu_image != null) {
            stmt.bindString(3, Menu_image);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(4, Description);
        }
        stmt.bindLong(5, entity.getProduct_ID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductDetailImage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMenu_ID());
 
        String Menu_image = entity.getMenu_image();
        if (Menu_image != null) {
            stmt.bindString(3, Menu_image);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(4, Description);
        }
        stmt.bindLong(5, entity.getProduct_ID());
    }

    @Override
    protected final void attachEntity(ProductDetailImage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductDetailImage readEntity(Cursor cursor, int offset) {
        ProductDetailImage entity = new ProductDetailImage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // Menu_ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Menu_image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Description
            cursor.getInt(offset + 4) // Product_ID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductDetailImage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMenu_ID(cursor.getInt(offset + 1));
        entity.setMenu_image(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProduct_ID(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductDetailImage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductDetailImage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductDetailImage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
